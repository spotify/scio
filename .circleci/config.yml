version: &version 2.1

####################
# Templates
####################

settings: &settings
  working_directory: ~/scio
  resource_class: xlarge

env: &env
  GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/scio/scripts/data-integration-test.json
  DATASTORE_PROJECT_ID: data-integration-test

executors:
  scala_212: &scala_212
    <<: [*settings]
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      <<: *env
      SCALA_VERSION: 2.12.11
  scala_213: &scala_213
    <<: [*settings]
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      <<: *env
      SCALA_VERSION: 2.13.1

  scala_212_jdk11:
    <<: [*scala_212]
    docker:
      - image: circleci/openjdk:11-jdk
  scala_213_jdk11:
    <<: [*scala_213]
    docker:
      - image: circleci/openjdk:11-jdk

  deploy: &deploy
    <<: [*settings]
    docker:
      # this image has both JDK and golang needed for deploying artifacts
      - image: circleci/golang:1.12.1-browsers
    environment:
      <<: *env
      SCALA_VERSION: 2.12.11

setup_dependencies_key: &setup_dependencies_key
  run:
    name: Generate cache key
    command: |
      shasum build.sbt \
        project/plugins.sbt \
        project/build.properties > /tmp/dependencies.cache.tmp

commands:
  build:
    parameters:
      build-steps:
        description: "build steps"
        type: steps
        default: []
    steps:
      - checkout
      - *setup_dependencies_key
      - restore_cache:
          keys:
            - v7-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/dependencies.cache.tmp" }}
            - v7-dependencies-
      - run: ./scripts/gen_schemas.sh
      - run:
          name: setup
          command: |
            if [ -n "$ENCRYPTION_KEY" ]; then
              openssl aes-256-cbc -d \
                -in "$GOOGLE_APPLICATION_CREDENTIALS.enc" \
                -out $GOOGLE_APPLICATION_CREDENTIALS \
                -k $ENCRYPTION_KEY
            fi

            if [ -n "$CIRCLE_PR_USERNAME" ]; then
              echo "Scala $SCALA_VERSION, forked PR #$CIRCLE_PR_NUMBER from $CIRCLE_PR_USERNAME/$CIRCLE_PR_REPONAME"
              echo 'export SBT_OPTS="-Dbigquery.project=dummy-project"' >> $BASH_ENV
            else
              echo "Scala $SCALA_VERSION, branch: $CIRCLE_BRANCH"
              echo 'export SBT_OPTS="-Dbigquery.project=data-integration-test -Dbigquery.secret=$GOOGLE_APPLICATION_CREDENTIALS"' >> $BASH_ENV
            fi
      - run: if [ "$CIRCLE_BRANCH" == "beam-master" ]; then ./scripts/circleci_snapshot.sh; fi
      - steps: << parameters.build-steps >>
      - save_cache:
          key: v7-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/dependencies.cache.tmp" }}
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.m2"
            - "~/.cache/coursier"

####################
# Jobs
####################

jobs:
  checks:
    executor: scala_212
    steps:
      - build:
          build-steps:
            - run:
                command: |
                  sbt -v $SBT_OPTS \
                    scalafmtCheckAll scalafmtSbtCheck javafmtCheck\
                    "; scalafixEnable; scalafix --check; test:scalafix --check; it:scalafix --check"
            - run:
                command: |
                  cd scalafix; sbt -v $SBT_OPTS  scalafmtCheckAll scalafmtSbtCheck

  build_scalafix_rules_212:
    executor: scala_212
    steps:
      - build:
          build-steps:
            - run: cd scalafix; sbt -v $SBT_OPTS "++$SCALA_VERSION test"

  build_212:
    executor: scala_212
    steps:
      - build:
          build-steps:
            - run:
                command: |
                  sbt -v $SBT_OPTS \
                  coverage \
                  "++$SCALA_VERSION test" \
                  "++$SCALA_VERSION coverageReport" \
                  "++$SCALA_VERSION coverageAggregate"
            - run: ./scripts/circleci_repl.sh
            - run: bash <(curl -s https://codecov.io/bash)

  build_it_212: &build_it_212
    executor: scala_212
    steps:
      - build:
          build-steps:
            - run: sbt -v $SBT_OPTS "++$SCALA_VERSION it:test"

  build_212-jdk11:
    executor: scala_212_jdk11
    steps:
      - build:
          build-steps:
            - run: sbt -v $SBT_OPTS "++$SCALA_VERSION test"
            - run: ./scripts/circleci_repl.sh

  build_212-it-jdk11:
    <<: [*build_it_212]
    executor: scala_212_jdk11

  build_213: &build_213
    executor: scala_213
    steps:
      - build:
          build-steps:
            - run: sbt -v $SBT_OPTS "++$SCALA_VERSION test"
            - run: ./scripts/circleci_repl.sh

  build_it_213: &build_it_213
    executor: scala_213
    steps:
      - build:
          build-steps:
            - run: sbt -v $SBT_OPTS "++$SCALA_VERSION it:test"

  build_213-jdk11:
    <<: [*build_213]
    executor: scala_213_jdk11

  build_213-it-jdk11:
    <<: [*build_it_213]
    executor: scala_213_jdk11

  deploy:
    executor: deploy
    steps:
      - build:
          build-steps:
            - run: curl --silent --show-error --location --fail --retry 3 --output /tmp/sbt.tgz https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/sbt-latest.tgz
            - run: tar xzf /tmp/sbt.tgz
            - run: ./sbt/bin/sbt -v $SBT_OPTS ++$SCALA_VERSION scio-repl/assembly
            - run: go get -u github.com/tcnksm/ghr
            - run: ghr -u spotify -draft $CIRCLE_TAG scio-repl/target/scala-*/scio-repl-*.jar

  publish_212: &publish_212
    executor: scala_212
    steps:
      - build:
          build-steps:
            - run: sbt -v $SBT_OPTS "++$SCALA_VERSION publish"

  publish_213:
    <<: [*publish_212]
    executor: scala_213

  bench_io:
    executor: scala_212
    steps:
      - build:
          build-steps:
            - run:
                command: sbt -v $SBT_OPTS "++$SCALA_VERSION scio-test/it:runMain com.spotify.scio.benchmarks.ScioIOBenchmark --name=ci"
                no_output_timeout: 30m

  bench_bigtable:
    executor: scala_212
    steps:
      - build:
          build-steps:
            - run:
                command: sbt -v $SBT_OPTS "++$SCALA_VERSION scio-bigtable/it:runMain com.spotify.scio.bigtable.BigtableBenchmark --name=ci"
                no_output_timeout: 30m

  bench_batch:
    executor: scala_212
    steps:
      - build:
          build-steps:
            - run:
                command: sbt -v $SBT_OPTS "++$SCALA_VERSION scio-test/it:runMain com.spotify.scio.benchmarks.ScioBatchBenchmark --name=ci"
                no_output_timeout: 30m

  bench_streaming:
    executor: scala_212
    steps:
      - build:
          build-steps:
            - run:
                command: sbt -v $SBT_OPTS "++$SCALA_VERSION scio-test/it:runMain com.spotify.scio.benchmarks.ScioStreamingBenchmark --name=ci"
                no_output_timeout: 30m

  bench_streaming_metrics:
    executor: scala_212
    steps:
      - build:
          build-steps:
            - run:
                command: sbt -v $SBT_OPTS "++$SCALA_VERSION scio-test/it:runMain com.spotify.scio.benchmarks.ScioStreamingBenchmarkMetrics --name=ci"
                no_output_timeout: 30m

####################
# Workflows
####################

workflows:
  version: *version

  # Per commit build
  build:
    jobs:
      - checks:
          filters:
            tags:
              only: /^v.*/
      - build_scalafix_rules_212:
          filters:
            tags:
              only: /^v.*/
      - build_212:
          filters:
            tags:
              only: /^v.*/
      - build_it_212:
          filters:
            branches:
              ignore: /^pull.*/
      - build_212-jdk11:
          filters:
            tags:
              only: /^v.*/
      - build_212-it-jdk11:
          filters:
            branches:
              ignore: /^pull.*/
      - build_213:
          filters:
            tags:
              only: /^v.*/
      - build_it_213:
          filters:
            branches:
              ignore: /^pull.*/
      - build_213-jdk11:
          filters:
            tags:
              only: /^v.*/
      - build_213-it-jdk11:
          filters:
            branches:
              ignore: /^pull.*/
      - deploy:
          requires:
            - build_212
            - build_213
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  # Nightly build to publish Scio SNAPSHOTs
  publish:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - publish_212
      - publish_213

  # Nightly build with latest Beam SNAPSHOTs
  snapshot:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - beam-master
    jobs:
      - build_212
      - build_212-jdk11
      - build_213
      - build_213-jdk11
# Nightly benchmarks
#  bench:
#    triggers:
#      - schedule:
#          cron: "0 18 * * *"
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#      - bench_io
#      - bench_bigtable
#      - bench_batch
#      - bench_streaming
#  bench_streaming_metrics:
#    triggers:
#      - schedule:
#          cron: "0 * * * *"
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#      - bench_streaming_metrics
